name: CI

on:
  pull_request:

permissions:
  pull-requests: write

jobs:
  tflint:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        env: [prod]

    # strategy:
    #   matrix:
    #     env: [dev, prod]

    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Setup TFLint
        uses: terraform-linters/setup-tflint@v4
        with:
          tflint_version: v0.56.0

      - name: Show version
        run: tflint --version

      - name: Init TFLint
        run: tflint --init
        env:
          GITHUB_TOKEN: ${{ github.token }}
          # https://github.com/terraform-linters/tflint/blob/master/docs/user-guide/plugins.md#avoiding-rate-limiting

      - name: Run TFLint
        run: tflint --format compact --recursive

  fmt-validate-plan:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        env: [prod]

    # strategy:
    #   matrix:
    #     env: [dev, prod]

    outputs:
      results: ${{ steps.collect.outputs.results }}

    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.11.2

      - name: Setup google service account - ${{ matrix.env }}
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets[format('GCP_CREDENTIALS_{0}', matrix.env)] }}

      - name: Terraform fmt
        id: fmt
        run: terraform fmt -recursive -check
        continue-on-error: true

      - name: Terraform Init - ${{ matrix.env }}
        id: init
        run: terraform init -input=false
        working-directory: ${{ github.workspace }}/${{ matrix.env }}

      - name: Terraform Validate - ${{ matrix.env }}
        id: validate
        run: terraform validate
        working-directory: ${{ github.workspace }}/${{ matrix.env }}

      - name: Terraform Plan - ${{ matrix.env }}
        id: plan
        run: terraform plan -input=false
        continue-on-error: true
        working-directory: ${{ github.workspace }}/${{ matrix.env }}

      - name: Collect results
        id: collect
        run: |
          echo "results<<EOF" >> $GITHUB_OUTPUT
          echo "- Environment: **${{ matrix.env }}**" >> $GITHUB_OUTPUT
          echo "  - ðŸ“– Plan: \`${{ steps.plan.outcome }}\`" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

  comment:
    needs: fmt-validate-plan
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
      - uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // 1. Retrieve existing bot comments for the PR
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const botComment = comments.find(comment => {
              return comment.user.type === 'Bot' && comment.body.includes('ðŸ›  Terraform Plan Result');
            });

            // 2. Prepare format of the comment
            const output = `
              # ðŸ›  Terraform Plan Result

              ${{ needs.fmt-validate-plan.outputs.results }}
            `;

            // 3. Post or update the comment
            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: output,
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: output,
              });
            }
